import {useCallback, useState} from "react";
import {api} from "@/services/api";
import {WorkSpaceTypes} from "@/types/typesWorkSpaces";
import {Connection} from "@/types/typesConnection";
import {useLoadConnections} from "@/shared/hooks/useLoadConnections";


export interface DTable {
    id: number;
    workspace_id: number;
    name: string;
    description: string;
    published: boolean;
    select_query?: string;
    insert_query?: string;
    update_query?: string;
    delete_query: string;
}

export interface Column {
    id: number;
    table_id: number;
    name: string;
    description: string | null
    datatype: string;
    required: boolean;
    length: number | null | string;
    precision: number | null | string;
    primary: boolean;
    increment: boolean;
    datetime: number | null | string | boolean;
    // –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ –∂–µ–ª–∞–Ω–∏—é
}

export type Widget = {
    id: number;
    table_id: number;
    name: string;
    description: string | null;
}


export type WidgetColumn = {
    id: number;
    widget_id: number;
    alias: string | null;
    default: string | null;
    placeholder: string | null;
    published: boolean;
    type: string;
    reference: {
        width: number;
        primary: boolean;
        visible: boolean;
        table_column: {
            table_id: number;
            id: number;
            name: string;
            description: string | null;
            datatype: string;
            length: number | null;
            precision: number | null;
            primary: boolean;
            increment: boolean;
            datetime: boolean;
            required: boolean;
        };
    }[];
};


/** –ü–æ–¥-–≤–∏–¥–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ —Ñ–æ—Ä–º—É */
export interface SubWidget {
    widget_order: number;          // –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    sub_widget_id: number;          // id –≤–∏–¥–∂–µ—Ç–∞-–¥–µ—Ç–∞–ª–∏
    form_id: number;          // id —Ç–æ–π –∂–µ —Ñ–æ—Ä–º—ã
    where_conditional: string | null;   // SQL-—É—Å–ª–æ–≤–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å null
}

/** –û–±—ä–µ–∫—Ç —Ñ–æ—Ä–º—ã, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å ¬´–≥–ª–∞–≤–Ω—ã–º¬ª –≤–∏–¥–∂–µ—Ç–æ–º */
export type WidgetForm = {
    main_widget_id: number;
    name: string;
    description: string | null;
    form_id: number;
    sub_widgets: {
        widget_order: number;
        sub_widget_id: number;
        form_id: number;
        where_conditional: string | null;
    }[];
    tree_fields: {
        column_order: number;
        table_column_id: number;
    }[];
};

//—Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã MAIN

export interface FormColumn {
    column_order: number;
    column_name: string;
    placeholder: string | null;
    type: string | null;
    default: string | null;
    published: boolean;
    required: boolean;
    width: number;
    widget_column_id: number;


}

/** –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö */
export interface FormRow {
    /** –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–±—ä–µ–∫—Ç–æ–º –≤–∏–¥–∞ { person_id: 3, ‚Ä¶ } */
    primary_keys: Record<string, number | string>;
    /** –∑–Ω–∞—á–µ–Ω–∏—è –∏–¥—É—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ columns */
    values: (string | number | null)[];
}

/** –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–ª–æ–∫–∞ ‚Äúdisplayed_widget‚Äù */
export interface DisplayedWidget {
    name: string;
    description: string | null;
}

/** –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞ */
export interface FormDisplay {
    displayed_widget: DisplayedWidget;
    columns: FormColumn[];
    data: FormRow[];
}


export interface SubDisplayedWidget {
    widget_order: number;
    name: string;
    description: string | null;
}

export interface SubFormColumn {
    column_order: number;
    column_name: string;
    placeholder: string | null;
    type: string | null;
    default: string | null;
    published: boolean;
    required: boolean;
    width: number;
}

export interface SubFormRow {
    primary_keys: Record<string, number | string>;
    values: (number | string | null)[];
}

export interface SubDisplay {
    sub_widgets: SubDisplayedWidget[];  // —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    displayed_widget: SubDisplayedWidget;    // –∞–∫—Ç–∏–≤–Ω—ã–π
    columns: SubFormColumn[];
    data: SubFormRow[];
}

export interface FormTreeColumn {
    table_column_id: number;
    name: string;
    values: (string | number | null)[];
}


// shared/hooks/useWorkSpaces.ts
export const useWorkSpaces = () => {
    const [workSpaces, setWorkSpaces] = useState<WorkSpaceTypes[]>([]);
    const [tablesByWs, setTablesByWs] = useState<Record<number, DTable[]>>({});
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [columns, setColumns] = useState<Column[]>([]);
    const [selectedTable, setSelTable] = useState<DTable | null>(null);


    /* ‚Äî —Å–ø–∏—Å–æ–∫ WS ‚Äî */
    const loadWorkSpaces = useCallback(async () => {
        setLoading(true);
        try {
            const {data} = await api.get<WorkSpaceTypes[]>('/workspaces');
            setWorkSpaces(data.sort((a, b) => a.id - b.id));
        } catch {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
        } finally {
            setLoading(false);
        }
    }, []);

    const updateTableMeta = useCallback(
        async (id: number, patch: Partial<DTable>) => {
            try {
                const {data} = await api.patch<DTable>(`/tables/${id}`, patch);

                setTablesByWs(prev => {
                    const copy = {...prev};
                    const wsId = data.workspace_id;
                    copy[wsId] = (copy[wsId] || []).map(t => t.id === id ? {...t, ...data} : t);
                    return copy;
                });

                // üëá –û–±–Ω–æ–≤–∏–º selectedTable –≤—Ä—É—á–Ω—É—é
                setSelTable(prev => prev && prev.id === id ? {...prev, ...data} : prev);
            } catch (err) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
            }
        },
        []
    );


    const loadColumns = useCallback(
        async (table: DTable) => {
            setLoading(true);
            setError(null);
            setSelTable(table);             // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–æ-–µ –∏–º—è
            try {
                const {data} = await api.get<Column[]>(`/tables/${table.id}/columns`);
                setColumns(data.sort((a, b) => a.id - b.id));
            } catch {
                setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã');
            } finally {
                setLoading(false);
            }
        },
        [],
    );


    const [widgetsByTable, setWidgetsByTable] = useState<Record<number, Widget[]>>({});
    const [widgetsLoading, setWidgetsLoading] = useState(false);
    const [widgetsError, setWidgetsError] = useState<string | null>(null);

    const [widgetColumns, setWidgetColumns] = useState<WidgetColumn[]>([]);
    const [wColsLoading, setWColsLoading] = useState(false);
    const [wColsError, setWColsError] = useState<string | null>(null);

    /* ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã ‚Äî */
    const loadWidgetsForTable = useCallback(
        /** force=true ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à */
        async (tableId: number, force = false): Promise<Widget[]> => {
            setWidgetsLoading(true);
            setWidgetsError(null);

            if (!force && widgetsByTable[tableId]) {
                setWidgetsLoading(false);
                return widgetsByTable[tableId];
            }

            try {
                const {data} = await api.get<Widget[]>('/widgets', {
                    params: {table_id: tableId},
                });
                setWidgetsByTable(prev => ({...prev, [tableId]: data}));
                return data;
            } catch {
                setWidgetsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å widgets');
                return [];
            } finally {
                setWidgetsLoading(false);
            }
        },
        [widgetsByTable],
    );


    /** GET /widgets/{id}/columns */
    const loadColumnsWidget = useCallback(async (widgetId: number) => {
        setWColsLoading(true);
        setWColsError(null);
        try {
            const {data} = await api.get<WidgetColumn[]>(`/widgets/${widgetId}/columns`);
            setWidgetColumns(data);
        } catch {
            setWColsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã –≤–∏–¥–∂–µ—Ç–∞');
        } finally {
            setWColsLoading(false);
        }
    }, []);

    //—É–¥–∞–ª–∏–ª–∏ workspace
    const deleteWorkspace = useCallback(async (wsId: number) => {
        setWorkSpaces(prev => prev.filter(w => w.id !== wsId));
        setTablesByWs(prev => {
            const clone = {...prev};
            delete clone[wsId];
            return clone;
        });
        try {
            await api.delete(`/workspaces/${wsId}`);
        } catch {
            /* –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äí –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é */
            await loadWorkSpaces();
        }
    }, [loadWorkSpaces]);

    /* ‚Äî —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ WS ‚Äî */
    const loadTables = useCallback(
        /** force = true ‚Üí –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º */
        async (wsId: number, force = false): Promise<DTable[]> => {
            if (!force && tablesByWs[wsId]) return tablesByWs[wsId];

            const {data} = await api.get<DTable[]>('/tables', {
                params: {workspace_id: wsId},
            });
            setTablesByWs(prev => ({...prev, [wsId]: data}));
            return data;
        },
        [tablesByWs],
    );

    //–í–°–ï –û –¢–ê–ë–õ–ò–¶–ê–•
//—É–¥–∞–ª–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É
    const deleteTable = useCallback(
        async (table: DTable) => {
            /* ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî 1. optimistic UI ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
            setTablesByWs(prev => {
                const copy = {...prev};
                copy[table.workspace_id] =
                    (copy[table.workspace_id] ?? []).filter(t => t.id !== table.id);
                return copy;
            });

            /* –µ—Å–ª–∏ –º—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä */
            if (selectedTable?.id === table.id) {
                setSelTable(null);
                setColumns([]);
            }

            try {
                await api.delete(`/tables/${table.id}`);
            } catch {
                /* ¬´–æ—Ç–∫–∞—Ç¬ª ‚Äî –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ø–∏—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ */
                await loadTables(table.workspace_id, /* force */ true);
            }
        },
        [selectedTable, loadTables],
    );


    /** PATCH /tables/columns/{id}  ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É */
    const updateTableColumn = useCallback(
        async (id: number, patch: Partial<Omit<Column, 'id'>>) => {
            try {
                /* 1. –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫—É */
                const {data} = await api.patch<Column>(`/tables/columns/${id}`, patch);

                /* 2. –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º –≤ state */
                setColumns(prev =>
                    prev
                        .map(col => (col.id === id ? {...col, ...data} : col))
                        .sort((a, b) => a.id - b.id)           // –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                );
            } catch {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
                throw new Error('update failed');
            }
        },
        []
    );


    //—É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Table
    const deleteColumnTable = useCallback(
        async (id: number) => {
            try {
                await api.delete(`/tables/columns/${id}`);
                setColumns(prev => prev.filter(c => c.id !== id));   // ‚Üê —É–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            } catch {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞');
                throw new Error('delete failed');
            }
        },
        [],
    );

    //–ù–ê–ß–ê–õ–û WIDGET (—É–¥–∞–ª–µ–Ω–∏–µ ,update b —Ç.–¥)

    const [formsByWidget, setFormsByWidget] = useState<Record<number, WidgetForm>>({});


    /* ‚îÄ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã –æ–¥–∏–Ω —Ä–∞–∑ ‚îÄ */
    const loadWidgetForms = useCallback(async () => {
        if (Object.keys(formsByWidget).length) return;      // —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        const {data} = await api.get<WidgetForm[]>('/forms');
        const map: Record<number, WidgetForm> = {};
        data.forEach(f => {
            const sortedSubs = [...f.sub_widgets].sort(
                (a, b) => a.widget_order - b.widget_order
            );

            map[f.main_widget_id] = {...f, sub_widgets: sortedSubs};
        });       // —Å–æ—Ö—Ä–∞–Ω—è–µ–º OBJECT
        setFormsByWidget(map);
    }, [formsByWidget]);




    //—É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Widget
    const deleteColumnWidget = useCallback(
        async (widgetColumnId: number) => {
            try {
                await api.delete(`/widgets/columns/${widgetColumnId}`);

                /* –∏–∑ —Å—Ç–µ–π—Ç–∞ —É–±–∏—Ä–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç WidgetColumnsOfTable —Å —ç—Ç–∏–º id */
                setWidgetColumns(prev => prev.filter(wc => wc.id !== widgetColumnId));
            } catch {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ –≤–∏–¥–∂–µ—Ç–∞');
            }
        },
        [],
    );

    const deleteWidget = useCallback(
        async (widgetId: number, tableId: number) => {
            try {
                await api.delete(`/widgets/${widgetId}`);

                /* 1. —É–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã */
                setWidgetsByTable(prev => ({
                    ...prev,
                    [tableId]: (prev[tableId] ?? []).filter(w => w.id !== widgetId),
                }));

                /* 2. –µ—Å–ª–∏ —ç—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç ‚Äî –æ—á–∏—â–∞–µ–º –µ–≥–æ —Å—Ç–æ–ª–±—Ü—ã */
                setWidgetColumns(prev => prev.filter(wc => wc.widget_id !== widgetId));
            } catch {
                setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–∂–µ—Ç–∞');
            }
        },
        [],
    );


    /* ---------- WIDGET-COLUMNS PATCH  –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ widget/columns ---------- */
    const fetchWidgetAndTable = useCallback(async (widgetId: number) => {
        // widget
        let widget = Object.values(widgetsByTable)
            .flat()
            .find(w => w?.id === widgetId);

        if (!widget) {
            const {data} = await api.get<Widget>(`/widgets/${widgetId}`);
            widget = data;
            setWidgetsByTable(prev => ({
                ...prev,
                [data.table_id]: [data],        // –∫—ç—à–∏—Ä—É–µ–º
            }));
        }


        // table
        let table = Object.values(tablesByWs)
            .flat()
            .find(t => t?.id === widget.table_id);

        if (!table) {
            const {data} = await api.get<DTable>(`/tables/${widget.table_id}`);
            table = data;
            setTablesByWs(prev => ({
                ...prev,
                [data.workspace_id]: [...(prev[data.workspace_id] ?? []), data],
            }));
        }

        return {widget, table};
    }, [widgetsByTable, tablesByWs]);


    const updateWidgetColumn = useCallback(
        async (
            id: number,
            patch: Partial<Omit<WidgetColumn, 'id' | 'widget_id' | 'reference'>>
        ) => {
            const clean: any = {...patch};
            ['alias', 'default', 'promt'].forEach(f => {
                if (clean[f] === '') delete clean[f];
            });

            try {
                const {data} = await api.patch<WidgetColumn>(`/widgets/columns/${id}`, clean);

                setWidgetColumns(prev =>
                    [...prev]                              // —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é
                        .map(wc => (wc.id === id ? {...wc, ...data} : wc))
                        .sort((a, b) => a.id - b.id)        // !!! —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id
                );
            } catch {
                setWColsError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ –≤–∏–¥–∂–µ—Ç–∞');
                throw new Error('update failed');
            }
        },
        []
    );

    const addReference = useCallback(
        async (
            widgetColId: number,
            tblColId: number,
            payload: { width: number; visible: boolean; primary: boolean },
        ) => {
            await api.post(
                `/widgets/tables/references/${widgetColId}/${tblColId}`,
                payload,
            );
        },
        [],
    );

    //–í–°–ï –î–õ–Ø –§–û–†–ú (–æ–Ω–∏ —É –Ω–∞—Å —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑ –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü –∏ —Ç–¥)
    const [formTrees, setFormTrees] = useState<Record<number, FormTreeColumn[]>>({});
    const [formTreeLoading, setFormTreeLoading] = useState(false);
    const [formTreeError, setFormTreeError] = useState<string | null>(null);

    const loadFormTree = useCallback(async (formId: number): Promise<void> => {
        setFormTreeLoading(true);
        setFormTreeError(null);
        try {
            const {data} = await api.post<FormTreeColumn[] | FormTreeColumn>(`/display/${formId}/tree`);

            const normalized: FormTreeColumn[] = Array.isArray(data) ? data : [data];

            setFormTrees(prev => ({...prev, [formId]: normalized}));
        } catch (err: any) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:', err?.response?.status ?? err);
            // –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        } finally {
            setFormTreeLoading(false);
        }
    }, []);

    /* --- sub —Ñ–æ—Ä–º–∞ --- */
    const [subDisplay, setSubDisplay] = useState<SubDisplay | null>(null);
    const [subLoading, setSubLoading] = useState(false);
    const [subError, setSubError] = useState<string | null>(null);

    const loadSubDisplay = useCallback(
        /**
         * primary ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω: {} ‚Üí –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞.
         */
        async (
            formId: number,
            subOrder: number,
            primary: Record<string, unknown> = {},   // ‚Üê default
        ) => {
            setSubLoading(true);
            setSubError(null);
            try {
                const {data} = await api.post<SubDisplay>(
                    `/display/${formId}/sub`,
                    {primary_keys: primary},
                    {params: {sub_widget_order: subOrder}},
                );


                /* —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
                const sorted = {
                    ...data, sub_widgets: [...data.sub_widgets].sort(
                        (a, b) => a.widget_order - b.widget_order
                    )
                };

                setSubDisplay(sorted);

            } catch {
                setSubError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ sub-–≤–∏–¥–∂–µ—Ç–∞');
            } finally {
                setSubLoading(false);
            }
        },
        [],
    );
    /* --- –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ --- */
    const [formDisplay, setFormDisplay] = useState<FormDisplay | null>(null);
    const [formLoading, setFormLoading] = useState(false);
    const [formError, setFormError] = useState<string | null>(null);


    /* --- –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ—Ä–º—ã --- */
    const loadFormDisplay = useCallback(async (formId: number) => {
        setFormLoading(true);
        setFormError(null);
        try {
            const {data} = await api.post<FormDisplay>(`/display/${formId}/main`);
            setFormDisplay(data);
        } catch {
            setFormError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã');
        } finally {
            setFormLoading(false);
        }
    }, []);

    const loadFilteredFormDisplay = useCallback(
        async (
            formId: number,
            filter: { table_column_id: number; value: string | number }
        ) => {
            try {
                const payload = [filter]; // üëà –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –º–∞—Å—Å–∏–≤

                const {data} = await api.post<FormDisplay>(
                    `/display/${formId}/main`,
                    payload
                );

                setFormDisplay(data); // üëà —Ç–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–æ–±—Ä–∞–∑—è—Ç—Å—è
            } catch (e) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º:', e);
            }
        },
        []
    );



//connections
    const [connections, setConnections] = useState<Connection[]>([]);

    const loadConnections = useCallback(async () => {
        try {
            const {data} = await api.get<Connection[]>('/connections');
            setConnections(data);
        } catch {
            setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π');
        } finally {
            setLoading(false);
        }
    }, []);


    return {
        workSpaces,
        loadWorkSpaces,
        tablesByWs,      // <-- —Ç–∞–±–ª–∏—Ü—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ WS
        loadTables,
        loading,
        error,
        columns,
        loadColumns,
        selectedTable,
        loadWidgetsForTable,
        widgetsByTable,
        widgetsLoading,
        widgetsError,
        formsByWidget,
        loadWidgetForms,
        widgetColumns,
        wColsLoading,
        wColsError,
        loadColumnsWidget,
        loadFormDisplay,
        formDisplay,
        formLoading,
        formError,
        loadSubDisplay,
        subDisplay,
        subLoading,
        subError,
        deleteWorkspace,
        deleteTable,
        fetchWidgetAndTable,
        deleteColumnTable,
        deleteColumnWidget,
        deleteWidget,
        updateTableColumn,
        updateWidgetColumn, addReference,
        loadFormTree,
        formTrees,
        loadFilteredFormDisplay,
        setFormDisplay,
        setSubDisplay,
        updateTableMeta,
        connections,
        loadConnections,
        setWidgetsByTable

    };
};
