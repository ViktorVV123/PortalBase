// --- src/api.ts --------------------------------------------------------------
// –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: AccessId / RefreshId –≤ cookies + ¬´—Ç–∏—Ö–∏–π¬ª refresh —á–µ—Ä–µ–∑ POST /refresh_session

import axios, {
    AxiosInstance,
    AxiosRequestConfig,
    AxiosError,
    AxiosResponse,
} from 'axios';

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. helpers: cookie read / write ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const getCookie = (n: string): string | undefined =>
    decodeURIComponent(
        document.cookie.replace(
            new RegExp(
                '(?:(?:^|.*;)\\s*' +
                n.replace(/[$()*+./?[\\\]^{|}-]/g, '\\$&') +
                '\\s*=\\s*([^;]*).*$)|^.*$',
            ),
            '$1',
        ),
    ) || undefined;

const setCookie = (n: string, v: string, days = 1) => {
    const exp = new Date(Date.now() + days * 864e5).toUTCString();
    document.cookie = `${n}=${encodeURIComponent(
        v,
    )}; expires=${exp}; path=/; SameSite=Strict`;
};

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. –ø–µ—Ä–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ ?ldapData=‚Ä¶ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

(function readTokensFromUrl() {
    const encoded = new URLSearchParams(window.location.search).get('ldapData');
    if (!encoded) return;

    try {
        const j = JSON.parse(atob(decodeURIComponent(encoded)));
        if (j.AccessId) setCookie('accessToken', j.AccessId);
        if (j.RefreshId) setCookie('refreshToken', j.RefreshId);
    } catch (e) {
        console.error('ldapData parse error:', e);
    }
})();

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. —Ç–æ–∫–µ–Ω—ã –∏–∑ cookie, fallback –¥–ª—è localhost ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

let accessToken = getCookie('accessToken') ?? '';
let refreshToken = getCookie('refreshToken') ?? '';

const isLocalhost = window.location.hostname === 'localhost';
if (isLocalhost && !accessToken) {
    accessToken = 'local-demo-access-token';
    refreshToken = 'local-demo-refresh-token';
    setCookie('accessToken', accessToken);
    setCookie('refreshToken', refreshToken);
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 4. URL-—ã API –∏ POST /refresh_session ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

const API_URL = isLocalhost
    ? 'https://csc-fv.pro.lukoil.com/api'
    : 'https://csc-fv.pro.lukoil.com/api';

const REFRESH_URL = `${API_URL}/refresh`;

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 5. –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äì —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ IdM ---------------------------- */

function goToIdm(): void {
    const r = getCookie('refreshToken');
    const base = 'https://csc-idm.pro.lukoil.com/?env=FrmV';
    const url = r ? `${base}&RefreshId=${encodeURIComponent(r)}` : base;
    window.location.href = url;
}

if (!isLocalhost && !accessToken) goToIdm(); // —Å—Ç–∞—Ä—Ç –±–µ–∑ AccessId

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 6. Axios instance + interceptors ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */

export const api: AxiosInstance = axios.create({
    baseURL: API_URL,
    headers: { 'Content-Type': 'application/json','access-id': 'eef86f09-3cd3-45df-8269-089c9aad1b6b' },
});

/*'access-id': 'eef86f09-3cd3-45df-8269-089c9aad1b6b'*/
/* --- request: auth-–∑–∞–≥–æ–ª–æ–≤–æ–∫ --------------------------------------------- */

// @ts-ignore
api.interceptors.request.use((cfg: AxiosRequestConfig) => {
    const fresh = getCookie('accessToken') ?? accessToken;
    if (fresh) cfg.headers = { ...cfg.headers, auth: fresh };
    return cfg;
});

/* --- response: 401 ‚Üí POST /refresh_session ‚Üí retry ----------------------- */

api.interceptors.response.use(
    (res: AxiosResponse) => res,
    async (err: AxiosError) => {
        const { response, config } = err;
        if (!response || response.status !== 401) return Promise.reject(err);

        /* dev-—Ä–µ–∂–∏–º: –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º */
        if (isLocalhost) {
            console.warn('[Auth] localhost ‚Üí 401 (demo token)');
            return Promise.reject(err);
        }

        /* –∏–∑–±–µ–≥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø–µ—Ç–ª–∏ (retry —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑) */
        // @ts-ignore
        if ((config as any)._retry) {
            goToIdm();
            return;
        }
        // @ts-ignore
        (config as any)._retry = true;

        const liveRefresh = getCookie('refreshToken');
        if (!liveRefresh) {
            goToIdm();
            return;
        }

        try {
            /* üîÑ —Ç–∏—Ö–∏–π refresh: POST /refresh_session
               ‚Äì body  : { "token": "<RefreshId>" }
               ‚Äì header: auth: <RefreshId>
            */
            const { data } = await axios.post<{
                AccessId: string;
                RefreshId: string;
            }>(
                REFRESH_URL,
                { token: liveRefresh },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        auth: liveRefresh,
                    },
                },
            );

            /* —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –≤ cookie –∏ –ø–∞–º—è—Ç—å */
            setCookie('accessToken', data.AccessId);
            setCookie('refreshToken', data.RefreshId);
            accessToken = data.AccessId;
            refreshToken = data.RefreshId;

            /* –ø–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: request-–∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –≤—Å—Ç–∞–≤–∏—Ç –Ω–æ–≤—ã–π AccessId */
            return api(config);
        } catch (refreshErr) {
            console.error('silent refresh failed:', refreshErr);
            goToIdm(); // fallback ‚Äì –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            return;
        }
    },
);
